// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Meeting       Meeting[]
  Point         Topic[]
  TopicComment  TopicComment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meeting {
  id              String            @id @default(cuid())
  title           String
  guildId         String
  locked          Boolean           @default(false)
  owner           String
  user            User              @relation(fields: [owner], references: [id])
  ManagementRoles ManagementRoles[]
  Topic           Topic[]

  @@index([owner])
}

model ManagementRoles {
  meetingId String
  roleId    String
  meeting   Meeting @relation(fields: [meetingId], references: [id])

  @@id([meetingId, roleId])
}

model Topic {
  id           Int            @id @default(autoincrement())
  note         String
  meetingId    String
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  meeting      Meeting        @relation(fields: [meetingId], references: [id])
  TopicComment TopicComment[]
}

model TopicComment {
  id      Int    @id @default(autoincrement())
  note    String
  topicId Int
  userId  String
  topic   Topic  @relation(fields: [topicId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}
